/*! \file
	\brief Заголовочный файл

	Файл содержит описание классов простейших геометрических фигур и их интерфейса.
*/
/*!
	\defgroup Shapes
	\ingroup Model
	\brief данный модуль предназначен реализации интерфеса геометрических фигур
*/
///@{
#pragma once
#include <iostream>
/*! \brief Интерфейс класса "Фигура"

	Класс является интерфесом для описания полей и методов геометрических фигур.
*/

class IShapes {
public:
	/*! \brief Виртуальный метод интерфейса

		Чисто виртуальный метод интерфейсного класса предоставляющий данные для отображения
	*/
	virtual void showShape() const = 0;
	/// \brief Виртуальный диструктор интерфейса
	virtual ~IShapes() = default;
};

/*! \brief Класс "Триугольник"

	Класс содержит методы взаимодействия с геометрической фигупрой "Триугольник".
*/
class Triangle :public IShapes {
public:
	/*! \brief Конструктор класса "Триугольник"

		Инициализирует поля класса (координаты и т.д.),если они есть.
	*/
	Triangle() {};
	/*! Консантный переопределенный метод для отображения данных полей класса и предоставления их View'у.
		\return не имеет возвращаемого значения.
	*/
	void showShape()const override { std::cout << "Triangle" << std::endl; }
	/// \brief Виртуальный диструктор интерфейса
	~Triangle()override = default;
};
/*! \brief Класс "Квадрат"

	Класс содержит методы взаимодействия с геометрической фигупрой "Квадрат".
*/
class Square :public IShapes {
public:
	/*! \brief Конструктор класса "Квадрат"

		Инициализирует поля класса (координаты и т.д.),если они есть.
	*/
	Square()  {};
	/*! Консантный переопределенный метод для отображения данных полей класса и предоставления их View'у.
		\return не имеет возвращаемого значения.
	*/
	void showShape()const override { std::cout << "Square" << std::endl; }
	/// \brief Виртуальный диструктор интерфейса
	~Square()override = default;
};
/*! \brief Класс "Окружность"

	Класс содержит методы взаимодействия с геометрической фигупрой "Окружность".
*/
class Circle :public IShapes {
public:
	/*! \brief Конструктор класса "Окружность"

		Инициализирует поля класса (координаты и т.д.),если они есть.
	*/
	Circle() {};
	/*! Консантный переопределенный метод для отображения данных полей класса и предоставления их View'у.
		\return не имеет возвращаемого значения.
	*/
	void showShape()const override { std::cout << "Circle" << std::endl; }
	/// \brief Виртуальный диструктор интерфейса
	~Circle()override = default;
};
///@}